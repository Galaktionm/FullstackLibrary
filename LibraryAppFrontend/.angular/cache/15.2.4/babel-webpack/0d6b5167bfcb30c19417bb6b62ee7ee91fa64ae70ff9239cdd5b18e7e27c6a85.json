{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AdminAuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route) {\n    if (localStorage.getItem(\"isAdmin\") === \"true\") {\n      console.log(\"Come on man\" + localStorage.getItem(\"isAdmin\"));\n      return true;\n    }\n    this.router.navigate(['/']);\n    return false;\n  }\n}\nAdminAuthGuard.ɵfac = function AdminAuthGuard_Factory(t) {\n  return new (t || AdminAuthGuard)(i0.ɵɵinject(i1.Router));\n};\nAdminAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminAuthGuard,\n  factory: AdminAuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,cAAc;EAEvBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,WAAW,CAACC,KAA6B;IAErC,IAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,KAAG,MAAM,EAAC;MACxCC,OAAO,CAACC,GAAG,CAAC,aAAa,GAACH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;MAC1D,OAAO,IAAI;;IAEf,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,OAAO,KAAK;EAChB;;AAZST,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAU,SAAdV,cAAc;EAAAW,YAFX;AAAM","names":["AdminAuthGuard","constructor","router","canActivate","route","localStorage","getItem","console","log","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/galaktion/Desktop/LibraryAppFrontend/src/app/authorization/AdminAuthGuard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"./AuthService\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AdminAuthGuard {\n\n    constructor(private router: Router) {}\n    \n    canActivate(route: ActivatedRouteSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n        \n        if(localStorage.getItem(\"isAdmin\")===\"true\"){\n            console.log(\"Come on man\"+localStorage.getItem(\"isAdmin\"))\n            return true;\n        }\n        this.router.navigate(['/']);\n        return false;\n    }\n    \n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}