{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./AuthService\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n  }\n  intercept(req, next) {\n    if (req.url.search(\"login\") === -1 && req.url.search(\"tset\") === -1) {\n      var token = this.service.getToken();\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: 'Bearer ' + token\n          }\n        });\n      }\n      return next.handle(req).pipe(catchError(error => {\n        console.log(error);\n        if (error instanceof HttpErrorResponse && error.status === 401) {\n          this.router.navigate(['login']);\n        }\n        return throwError(() => new Error(error));\n      }));\n    }\n    return next.handle(req);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SACAA,iBAAiB,QAAQ,sBAAsB;AAE/C,SAASC,UAAU,EAAcC,UAAU,QAAQ,MAAM;;;;AAMzD,OAAM,MAAOC,eAAe;EAEzBC,YAAoBC,OAAmB,EAAUC,MAAa;IAA1C,YAAO,GAAPD,OAAO;IAAsB,WAAM,GAANC,MAAM;EAAS;EAEhEC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAGjD,IAAGD,GAAG,CAACE,GAAG,CAACC,MAAM,CAAC,OAAO,CAAC,KAAG,CAAC,CAAC,IAAIH,GAAG,CAACE,GAAG,CAACC,MAAM,CAAC,MAAM,CAAC,KAAG,CAAC,CAAC,EAAC;MAC7D,IAAIC,KAAK,GAAG,IAAI,CAACP,OAAO,CAACQ,QAAQ,EAAE;MACnC,IAAID,KAAK,EAAE;QACRJ,GAAG,GAAGA,GAAG,CAACM,KAAK,CAAC;UAChBC,UAAU,EAAE;YACZC,aAAa,EAAE,SAAS,GAACJ;;SAE7B,CAAC;;MAED,OAAOH,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC,CAACU,IAAI,CAC3BjB,UAAU,CAAEkB,KAAK,IAAI;QACrBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,IAAIA,KAAK,YAAYnB,iBAAiB,IAAImB,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;UAC1D,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;QAErC,OAAOrB,UAAU,CAAC,MAAI,IAAIsB,KAAK,CAACL,KAAK,CAAC,CAAC;MACvC,CAAC,CAAC,CAAC;;IAGL,OAAOV,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;EACxB;;AA3BUL,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAsB,SAAftB,eAAe;EAAAuB,YAFf;AAAM","names":["HttpErrorResponse","catchError","throwError","AuthInterceptor","constructor","service","router","intercept","req","next","url","search","token","getToken","clone","setHeaders","Authorization","handle","pipe","error","console","log","status","navigate","Error","factory","providedIn"],"sourceRoot":"","sources":["/home/galaktion/Desktop/FullstackLibraryApp/LibraryAppFrontend/src/app/authorization/AuthInterceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, \nHttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError, Observable, throwError } from 'rxjs';\nimport { AuthService } from './AuthService';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class AuthInterceptor implements HttpInterceptor {\n\n   constructor(private service:AuthService, private router:Router){}\n\n   intercept(req: HttpRequest<any>, next: HttpHandler): \n   Observable<HttpEvent<any>>{\n\n    if(req.url.search(\"login\")===-1 && req.url.search(\"tset\")===-1){\n      var token = this.service.getToken();    \n      if (token) {\n         req = req.clone({\n         setHeaders: {\n         Authorization: 'Bearer '+token\n         }\n    });\n     }\n     return next.handle(req).pipe(\n      catchError((error) => {\n      console.log(error);\n      if (error instanceof HttpErrorResponse && error.status === 401) {\n            this.router.navigate(['login']);\n      }\n      return throwError(()=>new Error(error));\n      }));\n    }\n\n    return next.handle(req);\n   }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}