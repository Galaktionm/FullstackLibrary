{"ast":null,"code":"import { URLGlobal } from '../URLGlobal';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  getToken() {\n    var token = sessionStorage.getItem(\"token\");\n    return token;\n  }\n  login(item) {\n    var url = URLGlobal.libraryAppURL + \"api/authorization/login\";\n    return this.http.post(url, item);\n  }\n  setUserCredentials(result) {\n    sessionStorage.setItem(\"token\", result.token);\n    sessionStorage.setItem(\"userId\", result.userId);\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n  }\n  register(item) {\n    var url = URLGlobal.libraryAppURL + \"api/authorization/register\";\n    return this.http.post(url, item);\n  }\n  isAuthenticated() {\n    if (sessionStorage.getItem(\"userId\") != null) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,SAAS,QAAQ,cAAc;;;AAOxC,OAAM,MAAOC,WAAW;EACvBC,YAAsBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEzCC,QAAQ;IACL,IAAIC,KAAK,GAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC1C,OAAOF,KAAK;EACd;EAEAG,KAAK,CAACC,IAAkB;IACrB,IAAIC,GAAG,GAAGV,SAAS,CAACW,aAAa,GAAG,yBAAyB;IAC7D,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAcF,GAAG,EAAED,IAAI,CAAC;EACjD;EAEAI,kBAAkB,CAACC,MAAmB;IAClCR,cAAc,CAACS,OAAO,CAAC,OAAO,EAAED,MAAM,CAACT,KAAK,CAAC;IAC7CC,cAAc,CAACS,OAAO,CAAC,QAAQ,EAAED,MAAM,CAACE,MAAM,CAAC;EACnD;EAEAC,MAAM;IACFC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EACpC;EAEAC,QAAQ,CAACX,IAAqB;IAC1B,IAAIC,GAAG,GAAGV,SAAS,CAACW,aAAa,GAAG,4BAA4B;IAChE,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC;EACpC;EAEAY,eAAe;IACX,IAAGf,cAAc,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAE,IAAI,EAAC;MACtC,OAAO,IAAI;;IAEf,OAAO,KAAK;EAChB;;AAhCaN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFX;AAAM","names":["URLGlobal","AuthService","constructor","http","getToken","token","sessionStorage","getItem","login","item","url","libraryAppURL","post","setUserCredentials","result","setItem","userId","logout","localStorage","removeItem","register","isAuthenticated","factory","providedIn"],"sourceRoot":"","sources":["/home/galaktion/Desktop/LibraryAppFrontend/src/app/authorization/AuthService.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LoginRequest, LoginResult } from './login/logindto';\nimport { URLGlobal } from '../URLGlobal';\nimport { RegisterRequest } from './register/registerdto';\n\n\n@Injectable({\n providedIn: 'root',\n})\nexport class AuthService {\n constructor(protected http: HttpClient) {}\n\n getToken():string|null{\n    var token=sessionStorage.getItem(\"token\");\n   return token; \n }\n\n login(item: LoginRequest): Observable<LoginResult> {\n    var url = URLGlobal.libraryAppURL + \"api/authorization/login\";\n    return this.http.post<LoginResult>(url, item);\n}\n\nsetUserCredentials(result: LoginResult) {\n    sessionStorage.setItem(\"token\", result.token);\n    sessionStorage.setItem(\"userId\", result.userId);\n}\n\nlogout() {\n    localStorage.removeItem(\"token\");\n}\n\nregister(item: RegisterRequest):Observable<any>{\n    var url = URLGlobal.libraryAppURL + \"api/authorization/register\";\n    return this.http.post(url, item);\n}\n\nisAuthenticated():boolean{\n    if(sessionStorage.getItem(\"userId\")!=null){\n        return true;\n    }\n    return false;\n}\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}